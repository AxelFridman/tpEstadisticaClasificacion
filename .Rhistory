}
tiraResultadosPotencia(Ngrande, 100, 0.5, ps, zalpha)
hacerMuchasSimulaciones(Ngrande, 1000, 0.5, 0.49, zalpha)
hacerMuchasSimulaciones(Ngrande, 10000, 0.5, 0.49, zalpha)
hacerMuchasSimulaciones(Ngrande, 1000, 0.5, 0.4, zalpha)
alpha = 0.05
ps = c(0, 0.03, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 0.97)
p0s = c(0.5, 0.8, 0.97)
ns = c(10, 70, 200)
Ngrande = 1000
zalpha = qnorm(1-alpha/2)
tiraResultadosPotencia(Ngrande, 100, 0.5, ps, zalpha)
tiraResultadosPotencia(Ngrande, 100, 0.5, ps, zalpha)
tiraResultadosPotencia(Ngrande, 100, 0.5, ps, zalpha)
tiraResultadosPotencia(Ngrande, 100, 0.5, ps, zalpha)
tiraResultadosPotencia(Ngrande, 100, 0.5, ps, zalpha)
tiraResultadosPotencia(Ngrande, 100, 0.5, ps, zalpha)
tiraResultadosPotencia(Ngrande, 100, 0.5, ps, zalpha)
tiraResultadosPotencia(Ngrande, 20, 0.5, ps, zalpha)
tiraResultadosPotencia(Ngrande, 20, 0.5, ps, zalpha)
alpha = 0.05
ps = c(0, 0.03, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 0.97)
p0s = c(0.5, 0.8, 0.97)
ns = c(10, 70, 200)
Ngrande = 10000
zalpha = qnorm(1-alpha/2)
tiraResultadosPotencia(Ngrande, 20, 0.5, ps, zalpha)
tiraResultadosPotencia(Ngrande, 5, 0.5, ps, zalpha)
tiraResultadosPotencia(Ngrande, 10, 0.5, ps, zalpha)
tiraResultadosPotencia(Ngrande, 70, 0.5, ps, zalpha)
tiraResultadosPotencia(Ngrande, 700, 0.5, ps, zalpha)
alpha = 0.05
ps = c(0, 0.03, 0.1, 0.2, 0.3, 0.4, 0.45 , 0.49, 0.5, 0.51, 0.55, 0.6, 0.7, 0.8, 0.9, 0.97)
p0s = c(0.5, 0.8, 0.97)
ns = c(10, 70, 200)
Ngrande = 10000
zalpha = qnorm(1-alpha/2)
tiraResultadosPotencia(Ngrande, 700, 0.5, ps, zalpha)
tiraResultadosPotencia(Ngrande, 60, 0.5, ps, zalpha)
tiraResultadosPotencia(Ngrande, 10, 0.5, ps, zalpha)
tiraResultadosPotencia(Ngrande, 2, 0.5, ps, zalpha)
tiraResultadosPotencia(Ngrande, 200, 0.5, ps, zalpha)
resn200p0.5 = tiraResultadosPotencia(Ngrande, 200, 0.5, ps, zalpha)
plot(ps, resn200p0.5 ,type="l")
pss = seq(0, 1, 0.01)
pss
alpha = 0.05
ps = seq(0, 1, 0.01)#c(0, 0.03, 0.1, 0.2, 0.3, 0.4, 0.45 , 0.49, 0.5, 0.51, 0.55, 0.6, 0.7, 0.8, 0.9, 0.97)
p0s = c(0.5, 0.8, 0.97)
ns = c(10, 70, 200)
Ngrande = 10000
zalpha = qnorm(1-alpha/2)
resn200p0.5 = tiraResultadosPotencia(Ngrande, 200, 0.5, ps, zalpha)
plot(ps, resn200p0.5 ,type="l")
resn100p0.5 = tiraResultadosPotencia(Ngrande, 100, 0.5, ps, zalpha)
plot(ps, resn100p0.5 ,type="l")
resn70p0.5 = tiraResultadosPotencia(Ngrande, 70, 0.5, ps, zalpha)
plot(ps, resn70p0.5 ,type="l")
resn10p0.5 = tiraResultadosPotencia(Ngrande, 10, 0.5, ps, zalpha)
plot(ps, resn10p0.5 ,type="l")
alpha = 0.1
ps = seq(0, 1, 0.01)#c(0, 0.03, 0.1, 0.2, 0.3, 0.4, 0.45 , 0.49, 0.5, 0.51, 0.55, 0.6, 0.7, 0.8, 0.9, 0.97)
p0s = c(0.5, 0.8, 0.97)
ns = c(10, 70, 200)
Ngrande = 10000
zalpha = qnorm(1-alpha/2)
resn200p0.5 = tiraResultadosPotencia(Ngrande, 200, 0.5, ps, zalpha)
plot(ps, resn200p0.5 ,type="l")
resn100p0.5 = tiraResultadosPotencia(Ngrande, 100, 0.5, ps, zalpha)
plot(ps, resn100p0.5 ,type="l")
resn70p0.5 = tiraResultadosPotencia(Ngrande, 70, 0.5, ps, zalpha)
plot(ps, resn70p0.5 ,type="l")
resn100p0.5 = tiraResultadosPotencia(Ngrande, 100, 0.5, ps, zalpha)
plot(ps, resn100p0.5 ,type="l")
resn10p0.5 = tiraResultadosPotencia(Ngrande, 10, 0.5, ps, zalpha)
plot(ps, resn10p0.5 ,type="l")
resn10p0.5 = tiraResultadosPotencia(Ngrande, 10, 0.5, ps, zalpha)
plot(ps, resn10p0.5 ,type="l")
plot(ps, resn10p0.5 ,type="l", xlim = c(0.4, 0.6))
alpha = 0.1
ps = seq(0, 1, 0.01)#c(0, 0.03, 0.1, 0.2, 0.3, 0.4, 0.45 , 0.49, 0.5, 0.51, 0.55, 0.6, 0.7, 0.8, 0.9, 0.97)
p0s = c(0.5, 0.8, 0.97)
ns = c(10, 70, 200)
Ngrande = 1000
zalpha = qnorm(1-alpha/2)
resn10p0.5 = tiraResultadosPotencia(Ngrande, 10, 0.5, ps, zalpha)
plot(ps, resn10p0.5 ,type="l", xlim = c(0.4, 0.6))
resn10p0.6 = tiraResultadosPotencia(Ngrande, 10, 0.6, ps, zalpha)
plot(ps, resn10p0.6 ,type="l", xlim = c(0.4, 0.8))
plot(ps, resn10p0.6 ,type="l", xlim = c(0.4, 0.6))
resn10p0.6 = tiraResultadosPotencia(Ngrande, 10, 0.6, ps, zalpha)
plot(ps, resn10p0.6 ,type="l", xlim = c(0.4, 0.6))
tiraResultadosPotencia = function(Ngrande, n, p0, ps, zalpha){
res = c()
for (j in 1:length(ps)){
res[j] = hacerMuchasSimulaciones(Ngrande, n, p0, ps[j], zalpha)
}
return(res)
}
resn10p0.6 = tiraResultadosPotencia(Ngrande, 10, 0.6, ps, zalpha)
plot(ps, resn10p0.6 ,type="l", xlim = c(0.4, 0.6))
resn10p0.6 = tiraResultadosPotencia(Ngrande, 10, 0.6, ps, zalpha)
plot(ps, resn10p0.6 ,type="l")
resn10p0.5 = tiraResultadosPotencia(Ngrande, 10, 0.5, ps, zalpha)
plot(ps, resn10p0.5 ,type="l")
resn10p0.5 = tiraResultadosPotencia(Ngrande, 100, 0.5, ps, zalpha)
plot(ps, resn10p0.5 ,type="l")
resn70p0.5 = tiraResultadosPotencia(Ngrande, 70, 0.5, ps, zalpha)
plot(ps, resn70p0.5 ,type="l")
resn100p0.5 = tiraResultadosPotencia(Ngrande, 100, 0.5, ps, zalpha)
plot(ps, resn100p0.5 ,type="l")
resn200p0.5 = tiraResultadosPotencia(Ngrande, 200, 0.5, ps, zalpha)
plot(ps, resn200p0.5 ,type="l")
resn10p0.5 = tiraResultadosPotencia(Ngrande, 10, 0.5, ps, zalpha)
plot(ps, resn10p0.5 ,type="l", xlim = c(0.4, 0.6))
resn10p0.6 = tiraResultadosPotencia(Ngrande, 10, 0.6, ps, zalpha)
plot(ps, resn10p0.6 ,type="l")
resn200p0.5 = tiraResultadosPotencia(Ngrande, 200, 0.5, ps, zalpha)
plot(ps, resn200p0.5 ,type="l", xlab = "Parametro p en titon", ylab = "estimacion de potencia, cantidad de rechazos sobre total tests (asintotico)")
resn200p0.5 = tiraResultadosPotencia(Ngrande, 200, 0.5, ps, zalpha)
plot(ps, resn200p0.5 ,type="l", xlab = "Parametro p en titon", ylab = "estimacion de potencia, cantidad de rechazos sobre total tests")
resn10p0.6 = tiraResultadosPotencia(Ngrande, 10, 0.5, ps, zalpha)
plot(ps, resn10p0.6 ,type="l")
resn10p0.6 = tiraResultadosPotencia(Ngrande, 50, 0.5, ps, zalpha)
plot(ps, resn10p0.6 ,type="l")
resn10p0.6 = tiraResultadosPotencia(Ngrande, 50, 0.6, ps, zalpha)
plot(ps, resn10p0.6 ,type="l")
resn10p0.6 = tiraResultadosPotencia(Ngrande, 50, 0.8, ps, zalpha)
plot(ps, resn10p0.6 ,type="l")
resn10p0.6 = tiraResultadosPotencia(Ngrande, 50, 0.78, ps, zalpha)
plot(ps, resn10p0.6 ,type="l")
resn10p0.6 = tiraResultadosPotencia(Ngrande, 50, 0.7, ps, zalpha)
plot(ps, resn10p0.6 ,type="l")
resn10p0.6 = tiraResultadosPotencia(Ngrande, 50, 0.74, ps, zalpha)
plot(ps, resn10p0.6 ,type="l")
resn10p0.6 = tiraResultadosPotencia(Ngrande, 50, 0.76, ps, zalpha)
plot(ps, resn10p0.6 ,type="l")
resn10p0.6 = tiraResultadosPotencia(Ngrande, 50, 0.78, ps, zalpha)
plot(ps, resn10p0.6 ,type="l")
resn10p0.6 = tiraResultadosPotencia(Ngrande, 50, 0.77, ps, zalpha)
plot(ps, resn10p0.6 ,type="l")
resn10p0.6 = tiraResultadosPotencia(Ngrande, 50, 0.76, ps, zalpha)
plot(ps, resn10p0.6 ,type="l")
resn10p0.6 = tiraResultadosPotencia(Ngrande, 50, 0.765, ps, zalpha)
plot(ps, resn10p0.6 ,type="l")
resn10p0.6 = tiraResultadosPotencia(Ngrande, 50, 0.768, ps, zalpha)
plot(ps, resn10p0.6 ,type="l")
resn10p0.6 = tiraResultadosPotencia(Ngrande, 50, 0.767, ps, zalpha)
plot(ps, resn10p0.6 ,type="l")
resn10p0.76 = tiraResultadosPotencia(Ngrande, 50, 0.767, ps, zalpha)
plot(ps, resn10p0.76 ,type="l")
qnorm(0.99)
pnorm(-0.64)
0.953*2.32
qnorm(0.05)
2/sqrt(22)
2.21+1.64485
a = ((2.21+1.64485)/0.4264)
a
a**2
metodoViejo = c(25,19.5,16.6,21.3, 20.7, 16.8)
metodoNuevo = c(23.8,19,15.9,20.4, 29.6, 15.8)
wilcox.test(metodoNuevo)
shapiro.test(metodoViejo)
shapiro.test(rchisq(1000,2))
shapiro.test(rchisq(10000,2))
shapiro.test(rchisq(5000,2))
shapiro.test(rnorm(5000))
shapiro.test(metodoViejo)
shapiro.test(metodoNuevo)
sd(metodoViejo)
sd(metodoNuevo)
qt(0.05, 12.23)
(3.137781**2 + 5.26944**2)/2
sqrt(18.80633)
mean(metodoViejo)
mean(metodoNuevo)
3*(mean(metodoViejo) - mean(metodoNuevo)) / 4.336627
qt(0.05/2, 10)
mean(metodoViejo)
mean(metodoNuevo)
metodoNuevo[5] = 19.6
mean(metodoNuevo)
var(metodoNuevo)
var(metodoViejo)
(var(metodoNuevo) + var(metodoViejo))/2
mean(metodoViejo)-mean(metodoNuevo)
qt(10, 0.025)
qt(0.025,10)
qt(0.025,10) * sqrt(9.4396/3)
0.9 - -3.952378
0.9 - 3.952378
resn10p0.5 = tiraResultadosPotencia(Ngrande, 15, 0.5, ps, zalpha)
plot(ps, resn10p0.5 ,type="l", xlim = c(0.4, 0.6))
resn10p0.5 = tiraResultadosPotencia(Ngrande, 25, 0.5, ps, zalpha)
plot(ps, resn10p0.5 ,type="l", xlim = c(0.4, 0.6))
resn10p0.5 = tiraResultadosPotencia(Ngrande, 25, 0.5, ps, zalpha)
plot(ps, resn10p0.5 ,type="l")
resn10p0.5 = tiraResultadosPotencia(Ngrande, 5, 0.5, ps, zalpha)
plot(ps, resn10p0.5 ,type="l")
resn10p0.5 = tiraResultadosPotencia(Ngrande, 20, 0.5, ps, zalpha)
plot(ps, resn10p0.5 ,type="l")
resn10p0.5 = tiraResultadosPotencia(Ngrande, 2000, 0.5, ps, zalpha)
plot(ps, resn10p0.5 ,type="l")
resn10p0.5 = tiraResultadosPotencia(Ngrande, 20000, 0.5, ps, zalpha)
plot(ps, resn10p0.5 ,type="l")
plot(ps, resn10p0.5 ,type="l", xlim=c(0.45,0.55))
resn10p0.5 = tiraResultadosPotencia(Ngrande, 2000, 0.5, ps, zalpha)
plot(ps, resn10p0.5 ,type="l", xlim=c(0.45,0.55))
resn10p0.5 = tiraResultadosPotencia(Ngrande, 2000, 0.5, ps, zalpha)
plot(ps, resn10p0.5 ,type="l")
0.9/sqrt(9.43/3)
a = c(1,2,3)
b = c(4,11)
a + b
a, b
a b
c(a,b)
qnorm(0.95)
hacerMuchasSimulacionesCientifico = function(N, mu, alpha){
cantRechazo = 0
z = qnorm(1-alpha)
for i in range(1, N){
hacerMuchasSimulacionesCientifico = function(N, mu, alpha){
cantRechazo = 0
z = qnorm(1-alpha)
for (i in range(1, N)){
datos = rnorm(20, 0, 1)
datosExtra = rnorm(10, 0, 1)
datosCompletos = c(datos, datosExtra)
if(sqrt(20)*mean(datos)>z){
cantRechazo = cantRechazo + 1
}
else if(sqrt(30)*mean(datosCompletos)>z){
cantRechazo = cantRechazo + 1
}
}
return(cantRechazo)
}
N = 10000
mu = 0
alpha = 0.05
hacerMuchasSimulacionesCientifico = function(N, mu, alpha){
cantRechazo = 0
z = qnorm(1-alpha)
for (i in range(1, N)){
datos = rnorm(20, 0, 1)
datosExtra = rnorm(10, 0, 1)
datosCompletos = c(datos, datosExtra)
if(sqrt(20)*mean(datos)>z){
cantRechazo = cantRechazo + 1
}
else if(sqrt(30)*mean(datosCompletos)>z){
cantRechazo = cantRechazo + 1
}
}
return(cantRechazo/N)
}
hacerMuchasSimulacionesCientifico(N, mu, alpha)
hacerMuchasSimulacionesCientifico(N, mu, alpha)
hacerMuchasSimulacionesCientifico(N, mu, alpha)
hacerMuchasSimulacionesCientifico(N, mu, alpha)
hacerMuchasSimulacionesCientifico(N, mu, alpha)
hacerMuchasSimulacionesCientifico(N, mu, alpha)
hacerMuchasSimulacionesCientifico(N, mu, alpha)
N = 100
mu = 0
alpha = 0.05
hacerMuchasSimulacionesCientifico(N, mu, alpha)
hacerMuchasSimulacionesCientifico(N, mu, alpha)
hacerMuchasSimulacionesCientifico(N, mu, alpha)
hacerMuchasSimulacionesCientifico(N, mu, alpha)
hacerMuchasSimulacionesCientifico(N, mu, alpha)
hacerMuchasSimulacionesCientifico(N, mu, alpha)
hacerMuchasSimulacionesCientifico(N, mu, alpha)
hacerMuchasSimulacionesCientifico = function(N, mu, alpha){
cantRechazo = 0
z = qnorm(1-alpha)
for (i in range(1, N)){
datos = rnorm(20, 0, 1)
datosExtra = rnorm(10, 0, 1)
datosCompletos = c(datos, datosExtra)
print(datosCompletos)
if(sqrt(20)*mean(datos)>z){
cantRechazo = cantRechazo + 1
}
else if(sqrt(30)*mean(datosCompletos)>z){
cantRechazo = cantRechazo + 1
}
}
return(cantRechazo/N)
}
N = 10
mu = 0
alpha = 0.05
hacerMuchasSimulacionesCientifico(N, mu, alpha)
hacerMuchasSimulacionesCientifico = function(N, mu, alpha){
cantRechazo = 0
z = qnorm(1-alpha)
for (i in range(1, N)){
datos = rnorm(20, 0, 1)
datosExtra = rnorm(10, 0, 1)
datosCompletos = c(datos, datosExtra)
print(datosCompletos)
print()
if(sqrt(20)*mean(datos)>z){
cantRechazo = cantRechazo + 1
}
else if(sqrt(30)*mean(datosCompletos)>z){
cantRechazo = cantRechazo + 1
}
}
return(cantRechazo/N)
}
hacerMuchasSimulacionesCientifico(N, mu, alpha)
hacerMuchasSimulacionesCientifico = function(N, mu, alpha){
cantRechazo = 0
z = qnorm(1-alpha)
for (i in range(1, N)){
datos = rnorm(20, 0, 1)
datosExtra = rnorm(10, 0, 1)
datosCompletos = c(datos, datosExtra)
print(datosCompletos)
print("       ")
if(sqrt(20)*mean(datos)>z){
cantRechazo = cantRechazo + 1
}
else if(sqrt(30)*mean(datosCompletos)>z){
cantRechazo = cantRechazo + 1
}
}
return(cantRechazo/N)
}
hacerMuchasSimulacionesCientifico(N, mu, alpha)
N = 10
mu = 0
alpha = 0.05
hacerMuchasSimulacionesCientifico(N, mu, alpha)
hacerMuchasSimulacionesCientifico = function(N, mu, alpha){
cantRechazo = 0
z = qnorm(1-alpha)
for (i in c(1, N)){
datos = rnorm(20, 0, 1)
datosExtra = rnorm(10, 0, 1)
datosCompletos = c(datos, datosExtra)
print(datosCompletos)
print("       ")
if(sqrt(20)*mean(datos)>z){
cantRechazo = cantRechazo + 1
}
else if(sqrt(30)*mean(datosCompletos)>z){
cantRechazo = cantRechazo + 1
}
}
return(cantRechazo/N)
}
hacerMuchasSimulacionesCientifico(N, mu, alpha)
hacerMuchasSimulacionesCientifico = function(N, mu, alpha){
cantRechazo = 0
z = qnorm(1-alpha)
for (i in c(1: N)){
datos = rnorm(20, 0, 1)
datosExtra = rnorm(10, 0, 1)
datosCompletos = c(datos, datosExtra)
print(datosCompletos)
print("       ")
if(sqrt(20)*mean(datos)>z){
cantRechazo = cantRechazo + 1
}
else if(sqrt(30)*mean(datosCompletos)>z){
cantRechazo = cantRechazo + 1
}
}
return(cantRechazo/N)
}
hacerMuchasSimulacionesCientifico(N, mu, alpha)
hacerMuchasSimulacionesCientifico = function(N, mu, alpha){
cantRechazo = 0
z = qnorm(1-alpha)
for (i in c(1: N)){
datos = rnorm(20, 0, 1)
datosExtra = rnorm(10, 0, 1)
datosCompletos = c(datos, datosExtra)
if(sqrt(20)*mean(datos)>z){
cantRechazo = cantRechazo + 1
}
else if(sqrt(30)*mean(datosCompletos)>z){
cantRechazo = cantRechazo + 1
}
}
return(cantRechazo/N)
}
hacerMuchasSimulacionesCientifico(N, mu, alpha)
hacerMuchasSimulacionesCientifico(N, mu, alpha)
hacerMuchasSimulacionesCientifico(N, mu, alpha)
hacerMuchasSimulacionesCientifico(N, mu, alpha)
hacerMuchasSimulacionesCientifico(N, mu, alpha)
hacerMuchasSimulacionesCientifico(N, mu, alpha)
hacerMuchasSimulacionesCientifico(N, mu, alpha)
N = 1000000
mu = 0
alpha = 0.05
hacerMuchasSimulacionesCientifico(N, mu, alpha)
0.073868 / 0.05
mus = seq(0, 10, 0.1)
resultadosMus = c()
for (i in mus){
print(i)
}
a = (1)
a = c(1)
a = c(1,3)
a.append(4)
append(a,4)
resultadosMus = c()
for (i in mus){
resultadosMus = append(resultadosMus, hacerMuchasSimulacionesCientifico(1000, i, alpha))
}
plot(mus, resultadosMus, type = "l")
hacerMuchasSimulacionesCientifico = function(N, mu, alpha){
cantRechazo = 0
z = qnorm(1-alpha)
for (i in c(1: N)){
datos = rnorm(20, mu, 1)
datosExtra = rnorm(10, mu, 1)
datosCompletos = c(datos, datosExtra)
if(sqrt(20)*mean(datos)>z){
cantRechazo = cantRechazo + 1
}
else if(sqrt(30)*mean(datosCompletos)>z){
cantRechazo = cantRechazo + 1
}
}
return(cantRechazo/N)
}
resultadosMus = c()
for (i in mus){
resultadosMus = append(resultadosMus, hacerMuchasSimulacionesCientifico(1000, i, alpha))
}
plot(mus, resultadosMus, type = "l")
mus = seq(0, 5, 0.1)
resultadosMus = c()
for (i in mus){
resultadosMus = append(resultadosMus, hacerMuchasSimulacionesCientifico(1000, i, alpha))
}
plot(mus, resultadosMus, type = "l")
mus = seq(0, 3, 0.01)
resultadosMus = c()
for (i in mus){
resultadosMus = append(resultadosMus, hacerMuchasSimulacionesCientifico(10000, i, alpha))
}
plot(mus, resultadosMus, type = "l")
plot(mus, resultadosMus, type = "l", ylim = c(0,1))
x = c(1,2,3,4,5,6,7,8,9,10,11,12,13)
y = 7 * x + rnorm(13)
plot(x,y)
x = c(1,2,3,4,5,6,7,8,9,10,11,12,13)
y = 2 * x + rnorm(13)
plot(x,y)
pnorm(1.63)
1-pnorm(1.63)
setwd("~/Desktop/tpEstadisticaClasificacion")
df = read.csv("lluviaAus.csv")
View(df)
View(df)
df$RainToday = as.factor(df$RainToday)
df$RainTomorrow = as.factor(df$RainTomorrow)
View(df)
df$RainToday = as.factor(df$RainToday) # paso variables categoricas como factor
df$RainTomorrow = as.factor(df$RainTomorrow)
drop(df$X)
View(df)
df$RainToday = as.factor(df$RainToday) # paso variables categoricas como factor
df$RainTomorrow = as.factor(df$RainTomorrow)
df = drop(df$X)
df$RainToday = as.factor(df$RainToday) # paso variables categoricas como factor
df = read.csv("lluviaAus.csv")
df$RainToday = as.factor(df$RainToday) # paso variables categoricas como factor
df$RainTomorrow = as.factor(df$RainTomorrow)
df$X <- NULL # borro columna X ya que sospechamos que no representa nada sino que es algun tipo de "id" que quedo grabado en el dataframe y no tiene influencia en la observacion.
install.packages("ggplot2")
install.packages("GGally")
library("ggplot2")
library("ggplot2")
library("GGally")
ggpairs(data)+theme_bw()
ggpairs(df)+theme_bw()
library("ggplot2")
library("GGally")
ggpairs(df)+theme_bw()
ggpairs(df)+theme_bw()
ggpairs(df)+theme_bw()
ggpairs(df)+theme_bw()
g = ggpairs(df)+theme_bw()
g
g = ggpairs(df)+theme_bw()
invisible(g)
g
g = ggpairs(df)+theme_bw()
print(g, progress = F)
g = ggpairs(df, progress = FALSE)+theme_bw()
g
g = ggpairs(df, progress = FALSE)+theme_bw()
g
g = ggpairs(df, progress = FALSE)+theme_bw()
g
g = ggpairs(df, progress = FALSE, binwidth=1)+theme_bw()
g
g = ggpairs(df, progress = FALSE, bins=10)+theme_bw()
g
g = ggpairs(df, progress = FALSE, bins=10)+theme_bw()
g
